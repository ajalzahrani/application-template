// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String      @id @default(uuid())
  name         String
  email        String      @unique
  username     String      @unique
  password     String
  departmentId String?
  createdAt    DateTime    @default(now())
  roleId       String
  department   Department? @relation(fields: [departmentId], references: [id])
  role         Role        @relation(fields: [roleId], references: [id])
}

model Role {
  id          String           @id @default(cuid())
  name        String           @unique
  description String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  users       User[]
  permissions RolePermission[]
}

model Permission {
  id          String           @id @default(cuid())
  code        String           @unique // e.g., "manage:occurrences", "view:dashboard"
  name        String
  description String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  roles       RolePermission[]
}

model RolePermission {
  id           String     @id @default(cuid())
  roleId       String
  permissionId String
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
}

model Department {
  id    String @id @default(uuid())
  name  String @unique
  users User[]
}

model Employee {
  id            String    @id @default(uuid())
  employeeNo    String
  firstName     String
  secondName    String?
  thirdName     String?
  lastName      String
  gender        String    @default("Male") // Male - female
  dob           DateTime?
  citizenship   String // Civilian - Foreigner
  nationalityId String
  noriqama      String // NationNo or IqamaNo
  mrn           String?
  unitId        String?
  rankId        String?
  jobTitleId    String?
  sponsorId     String?
  pictureLink   String?
  cardExpiryAt  DateTime
  lastRenewalAt DateTime?
  isActive      Boolean   @default(true)

  // relations
  nationality Nationality @relation(fields: [nationalityId], references: [id])
  unit        Unit?       @relation(fields: [unitId], references: [id])
  rank        Rank?       @relation(fields: [rankId], references: [id])
  sponsor     Sponsor?    @relation(fields: [sponsorId], references: [id])
  jobTitle    JobTitle?   @relation(fields: [jobTitleId], references: [id])
}

model Nationality {
  id     String   @id @default(uuid())
  nameEn String?
  nameAr String
  employee Employee[]
}

model Unit {
  id     String   @id @default(uuid())
  nameEn String?
  nameAr String
  employee Employee[]
}

model Rank {
  id     String   @id @default(uuid())
  nameEn String?
  nameAr String
  employee Employee[]
}

model Sponsor {
  id     String   @id @default(uuid())
  nameEn String?
  nameAr String
  employee Employee[]
}

model JobTitle {
  id     String   @id @default(uuid())
  nameEn String?
  nameAr String
  employee Employee[]
}